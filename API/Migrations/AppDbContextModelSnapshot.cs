// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Course.API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("API.Models.Assignment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CourseInfoCourseId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TotalAvailablePoints")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CourseInfoCourseId");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("API.Models.AssignmentSubmission", b =>
                {
                    b.Property<string>("SubmissionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AssignmentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Grade")
                        .HasColumnType("float");

                    b.Property<bool>("IsGraded")
                        .HasColumnType("bit");

                    b.Property<string>("StudentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubmissionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubmissionId");

                    b.HasIndex("AssignmentId");

                    b.ToTable("AssignmentSubmissions");
                });

            modelBuilder.Entity("API.Models.ContentItem", b =>
                {
                    b.Property<int>("ContentItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContentItemId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ModuleId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContentItemId");

                    b.HasIndex("ModuleId");

                    b.ToTable("ContentItems");
                });

            modelBuilder.Entity("API.Models.CourseInfo", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("API.Models.Module", b =>
                {
                    b.Property<int>("ModuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ModuleId"));

                    b.Property<int?>("CourseInfoCourseId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ModuleId");

                    b.HasIndex("CourseInfoCourseId");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("API.Models.Student", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Classification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("CourseInfoStudent", b =>
                {
                    b.Property<int>("CourseInfoCourseId")
                        .HasColumnType("int");

                    b.Property<string>("RosterStudentId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CourseInfoCourseId", "RosterStudentId");

                    b.HasIndex("RosterStudentId");

                    b.ToTable("CourseStudentEnrollment", (string)null);
                });

            modelBuilder.Entity("API.Models.Assignment", b =>
                {
                    b.HasOne("API.Models.CourseInfo", null)
                        .WithMany("Assignments")
                        .HasForeignKey("CourseInfoCourseId");
                });

            modelBuilder.Entity("API.Models.AssignmentSubmission", b =>
                {
                    b.HasOne("API.Models.Assignment", null)
                        .WithMany("Submissions")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Models.ContentItem", b =>
                {
                    b.HasOne("API.Models.Module", null)
                        .WithMany("ContentItems")
                        .HasForeignKey("ModuleId");
                });

            modelBuilder.Entity("API.Models.Module", b =>
                {
                    b.HasOne("API.Models.CourseInfo", null)
                        .WithMany("Modules")
                        .HasForeignKey("CourseInfoCourseId");
                });

            modelBuilder.Entity("CourseInfoStudent", b =>
                {
                    b.HasOne("API.Models.CourseInfo", null)
                        .WithMany()
                        .HasForeignKey("CourseInfoCourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("RosterStudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Models.Assignment", b =>
                {
                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("API.Models.CourseInfo", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Modules");
                });

            modelBuilder.Entity("API.Models.Module", b =>
                {
                    b.Navigation("ContentItems");
                });
#pragma warning restore 612, 618
        }
    }
}
